name: actions

on: [push]
permissions:
  contents: write

jobs:
  build-sdist:
    name: Create sources on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    environment: actions
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest]
        python-version: [ "3.10" ]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies Pybinding
        run: |
          python -m pip install wheel scipy matplotlib pytest cmake ninja build setuptools numpy pybinding-dev
      - name: Build wheel
        run: python -m build --sdist --wheel --outdir dist/
      - name: Test Python
        run: |
          python -c "import pybinding as pb; exit(pb.tests())"
          python -c "import tmdybinding as tmdy; exit(tmdy.tests())"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sources
          path: dist/*.tar.gz

  testbuilds:
    name: Test build on ${{ matrix.os }} for ${{ matrix.source }} with Python ${{ matrix.python-version }}
    environment: actions
    runs-on: ubuntu-latest
    needs: [ build-sdist ]
    strategy:
        matrix:
            os: [ ubuntu-latest, windows-latest, macos-12, macos-14]
            python-version: [ "3.10" ]
            source: [ "whl", "tar.gz" ]
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: sources
          path: dist
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tmdybinding on Windows
        run: python -c "import glob; import os; [os.system(f'python -m pip install {i}') for i in glob.glob('dist/*.${{ matrix.source }}')]"
      - name: Test tmdybinding
        run: |
          python -c "import tmdybinding as tmdy; exit(tmdy.tests())"
          python -c "import pybinding as pb; exit(pb.tests())"

  testpypi:
    name: Test upload on PyPi
    environment: actions
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
    needs: [ testbuilds ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: sources
          path: dist
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  pypi:
    name: Publish to PyPi
    environment: actions
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
    needs: [ testpypi ]
    runs-on: ubuntu-latest
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          name: sources
          path: dist
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  documentation:
    name: Make and upload the documentation
    environment: actions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install mkdocs-material mkdocstrings[python]
      - run: mkdocs gh-deploy --force
